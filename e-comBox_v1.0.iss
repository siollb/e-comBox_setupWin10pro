; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "e-comBox"
#define MyAppVersion "1.0"
#define MyAppPublisher "BTS SIO LLB Ajaccio / Réseau Certa"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{AE3F5FEF-D723-417C-B5F3-9D491655D7DB}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
MinVersion=10.0.15063
;OnlyBelowVersion=6.0
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
LicenseFile=C:\Users\daniel\e-comBox_setupWin10pro\licence_e-comBox.rtf
InfoBeforeFile=C:\Users\daniel\e-comBox_setupWin10pro\avantInstallation.rtf
; InfoAfterFile=C:\Users\daniel\e-comBox_setupWin10pro\apresInstallation.rtf
; Remove the following line to run in administrative install mode (install for all users.)
PrivilegesRequired=admin
OutputDir=C:\Users\daniel\e-comBox_setupWin10pro
OutputBaseFilename=e-combox_pro_educ_ent_v1.0
Compression=lzma
SolidCompression=yes
WizardStyle=modern
SetupLogging=yes
ArchitecturesInstallIn64BitMode=x64 ia64
UninstallLogMode=overwrite
AllowUNCPath=False
DisableDirPage=yes
ShowComponentSizes=False
DisableProgramGroupPage=yes
UninstallDisplayIcon={uninstallexe}
VersionInfoVersion=1.0
DisableWelcomePage=False
AlwaysShowDirOnReadyPage=True
AlwaysShowGroupOnReadyPage=True
WizardImageFile=C:\Users\daniel\e-comBox_setupWin10pro\imageSetup.bmp
WizardSmallImageFile=C:\Users\daniel\e-comBox_setupWin10pro\imageSetupSmall.bmp
FlatComponentsList=False

[Languages]
Name: "french"; MessagesFile: "compiler:Languages\French.isl"

[Files]
; Les scripts qui vont permettre d'initialiser l'application
Source: "lanceScriptPS_initialisationApplication.bat"; DestDir: "{app}\scripts"; Flags: ignoreversion
Source: "initialisationApplication.ps1"; DestDir: "{app}\scripts"; Flags: ignoreversion
Source: "lanceScriptPS_installPortainer.bat"; DestDir: "{app}\scripts"; Flags: ignoreversion
Source: "lanceScriptPS_startPortainer.bat"; DestDir: "{app}\scripts"; Flags: ignoreversion
Source: "lanceScriptPS_startApplication.bat"; DestDir: "{app}\scripts"; Flags: ignoreversion

; Les scripts bat supplémentaires qui vont être utlisés dans les shortcut
Source: "lanceScriptPS_restartPortainer.bat"; DestDir: "{app}\scripts"; Flags: ignoreversion
Source: "lanceScriptPS_stopPortainer.bat"; DestDir: "{app}\scripts"; Flags: ignoreversion
Source: "lanceScriptPS_restartApplication.bat"; DestDir: "{app}\scripts"; Flags: ignoreversion
Source: "lanceScriptPS_restartDocker.bat"; DestDir: "{app}\scripts"; Flags: ignoreversion
Source: "lanceScriptPS_configProxyDocker.bat"; DestDir: "{app}\scripts"; Flags: ignoreversion
Source: "lanceScriptPS_configEnvironnement.bat"; DestDir: "{app}\scripts"; Flags: ignoreversion

Source: "restartPortainer.ps1"; DestDir: "{app}\scripts"; Flags: ignoreversion
Source: "stopPortainer.ps1"; DestDir: "{app}\scripts"; Flags: ignoreversion
Source: "restartApplication.ps1"; DestDir: "{app}\scripts"; Flags: ignoreversion
Source: "restartDocker.ps1"; DestDir: "{app}\scripts"; Flags: ignoreversion
Source: "configProxyDocker.ps1"; DestDir: "{app}\scripts"; Flags: ignoreversionSource: "configEnvironnement.ps1"; DestDir: "{app}\scripts"; Flags: ignoreversion

; Les scripts pour installer les pré-requis

Source: "checkHyperV.ps1"; DestDir: "{tmp}"; Flags: ignoreversion
;Source: "activeHyperV.ps1"; DestDir: "{tmp}"; Flags: ignoreversion
Source: "activeHyperV.bat"; DestDir: "{tmp}"; Flags: ignoreversion
Source: "downloadDocker.ps1"; DestDir: "{tmp}"; Flags: ignoreversion
Source: "installDocker.ps1"; DestDir: "{tmp}"; Flags: ignoreversion
Source: "lanceDocker.ps1"; DestDir: "{tmp}"; Flags: ignoreversion
Source: "installGit.ps1"; DestDir: "{tmp}"; Flags: ignoreversion
Source: "installPortainer.ps1"; DestDir: "{app}\scripts"; Flags: ignoreversion
Source: "lanceScriptPS_startPortainer.bat"; DestDir: "{app}\scripts"; Flags: ignoreversion
Source: "startPortainer.ps1"; DestDir: "{app}\scripts"; Flags: ignoreversion
Source: "startApplication.ps1"; DestDir: "{app}\scripts"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
Source: "desinstallGit.ps1"; DestDir: "{app}\uninstall"
Source: "desactiveHyperV.bat"; DestDir: "{app}\uninstall"
Source: "desinstallDocker.ps1"; DestDir: "{app}\uninstall"

[Icons]
;Name: "{group}\Initialiser e-comBox"; Filename: "{app}\lanceScriptPS_initialisationApplication.bat"
;Name: "{group}\Lancer e-comBox"; Filename: "{app}\{#MyAppName}.url"
;Name: "{userdesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppName}.url"; Tasks: desktopicon
;Name: "{userstartmenu}\{#MyAppName}"; Filename: "{app}\{#MyAppName}.url"; Tasks: desktopicon
Name: "{group}\Démarrer e-comBox"; Filename: "{app}\scripts\lanceScriptPS_restartApplication.bat"
Name: "{userdesktop}\{#MyAppName}"; Filename: "{app}\scripts\lanceScriptPS_restartApplication.bat"
Name: "{group}\Vérifier et configurer l'environnement"; Filename: "{app}\scripts\lanceScriptPS_configEnvironnement.bat"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"; WorkingDir: "{app}"

[Run]
;Filename: "powershell.exe"; Parameters: "-ExecutionPolicy Bypass -File """"{tmp}\fichierTemoinBis.ps1"""""; WorkingDir: "{app}"; Flags: 64bit; StatusMsg: "Le fichier temoinBis.txt a été créé"
;Filename: "powershell.exe"; Parameters: "-ExecutionPolicy Bypass -File """"{tmp}\installGit.ps1"""""; WorkingDir: "{app}";
;Filename: "powershell.exe"; Parameters: "-ExecutionPolicy Bypass -File """"{app}\configDocker.ps1"""""; WorkingDir: "{app}";
;Filename: "powershell.exe"; Parameters: "-ExecutionPolicy Bypass -File """"{app}\installPortainer.ps1"""""; WorkingDir: "{app}"; Flags: waituntilterminated
;Filename: "powershell.exe"; Parameters: "-ExecutionPolicy Bypass -File """"{app}\startPortainer.ps1"""""; WorkingDir: "{app}"; Flags: waituntilterminated
;Filename: "{app}\{#MyAppName}.url"; Flags: postinstall
Filename: "{app}\scripts\lanceScriptPS_initialisationApplication.bat"; Flags: waituntilterminated postinstall runhidden hidewizard; Description: "{cm:LaunchProgram,l'initialisation de e-comBox}"
;Filename: "{app}\scripts\lanceScriptPS_installPortainer.bat"; Flags: waituntilterminated postinstall runhidden hidewizard; Description: "{cm:LaunchProgram,initialisation}"
;Filename: "{app}\scripts\lanceScriptPS_startPortainer.bat"; Flags: waituntilterminated postinstall runhidden hidewizard; Description: "{cm:LaunchProgram,initialisation}"
;Filename: "{app}\scripts\lanceScriptPS_startApplication.bat"; Flags: waituntilterminated postinstall runhidden hidewizard; Description: "{cm:LaunchProgram,initialisation}"
;Filename: "powershell.exe"; Parameters: "-ExecutionPolicy Bypass -File """"{app}\startApplication.ps1"""""; WorkingDir: "{app}"; Flags: waituntilidle; Description: "{cm:LaunchProgram,initialisation}"

 [LangOptions]
;LanguageID=$040C

[INI]
;Filename: "{app}\{#MyAppName}.url"; Section: "InternetShortcut"; Key: "URL"; String: "http://localhost:8888"; Flags: uninsdeleteentry ; Tasks: quicklaunchicon
Filename: "{app}\{#MyAppName}.url"; Section: "InternetShortcut"; Key: "URL"; String: "http://localhost:8888"; Flags: uninsdeleteentry

[UninstallDelete]
Type: files; Name: "{app}\{#MyAppName}.url"
Type: filesandordirs; Name: "{userdocs}\..\e-comBox_portainer"

[Components]
Name: "HyperV"; Description: "Active Hyper V"; Types: full custom compact; Flags: fixed
Name: "Docker"; Description: "Docker Dekstop CEE pour Windows 10"; Types: full compact custom; Flags: fixed
Name: "Git"; Description: "Git pour Windows"; Types: full compact custom; Flags: fixed

[Tasks]
;Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"
;Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"
;Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"
;Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"

[ThirdParty]
CompileLogFile=C:\Users\daniel\e-comBox_setupWin10pro\logSetupEcomBox.txt

[Messages]
french.SelectComponentsDesc=Pour que l'application e-comBox fonctionne, les composants ci-dessous doivent être installés. Vous devez disposer des droits d'administrateur.
french.SelectComponentsLabel2=Selon le débit de votre connexion Internet et la puissance de votre machine, l'installation sera plus ou moins longue. %n%nCliquez sur suivant pour continuer.
french.FinishedLabel=L'assistant a terminé l'installation de e-comBox sur votre ordinateur.
french.ClickFinish=Avant de pouvoir profiter pleinement de l'application, vous pouvez dès maintenant initialiser e-comBox en cochant la case ci-dessous. %n%nSi vous ne le faîtes pas tout de suite, cette dernière pourra se faire ultérieurement via le lien Démarrage de l'application.
french.ConfirmUninstall=Vous vous apprêtez à  désinstaller %1. Si vous n'avez plus besoin des composants installés (Git, Docker et HyperV), vous pourrez ensuite procéder à leur désinstallation en suivant la procédure mise à disposition. Cliquez sur oui pour continuer.
french.WelcomeLabel2=Cet assistant va vous guider dans l'installation de [name/ver] sur votre ordinateur.%n%nL'installation de pré-requis sera peut-être nécessaire. Merci de permettre le redémarrage de votre ordinateur quand cela vous le sera demandé (à deux reprises au maximum). ll est recommandé de fermer toutes les applications actives avant de continuer.%n%nPar ailleurs, le téléchargement et l'installation de ces pré-requis peuvent parfois être long, merci d'être patient.

[UninstallRun]
;Filename: "powershell.exe"; Parameters: "-ExecutionPolicy Bypass -File """"{tmp}\desinstallGit.ps1"""""; WorkingDir: "{app}"; Flags: waituntilterminated; StatusMsg: "Git a été désinstallé"; Components: Git
;Filename: "powershell.exe"; Parameters: "-ExecutionPolicy Bypass -File """"{tmp}\desinstallDocker.ps1"""""; WorkingDir: "{app}"; Flags: waituntilterminated; StatusMsg: "Docker a été désinstallé"; Components: Docker
;Filename: "{tmp}\desactiveHyperV.bat"; Components: HyperV

[Dirs]
Name: "{app}\uninstall"; Flags: uninsalwaysuninstall
Name: "{app}\scripts"; Flags: uninsalwaysuninstall

[Code]
const
  RunOnceName = 'Redémarrage de la machine';

  QuitMessageReboot = 'L''installation de pré-requis sera peut-être nécessaire. Merci de permettre le redémarrage de votre ordinateur quand cela vous le sera demandé. '#13#13'Après ce redémarrage, le programme d''installation continuera.';
  QuitMessage1Reboot = 'Suite à l''activation d''HyperV, votre ordinateur va redémarrer. '#13#13'Après ce redémarrage, le programme d''installation continuera.';
  QuitMessage2Reboot = 'Suite à l''installation de Docker, votre ordinateur va redémarrer. '#13#13'Après ce redémarrage, le programme d''installation continuera.';
  QuitMessageInstallDocker = 'Docker a été installé. '#13#13' Vous pouvez fermer la fenêtre "Welcome" de bienvenue et poursuivre l''installation';
  QuitMessageError = 'Erreur. Il est impossible de continuer.';

var
  Restarted: Boolean;
  FinishedInstall: Boolean;
  PrepareToInstallWithProgressPage: TOutputProgressWizardPage;

function InitializeSetup(): Boolean;

var
  Version: TWindowsVersion;
  S: String;

  begin
  // Vérification de la version de Windows
  GetWindowsVersionEx(Version);

  // Désactivation de l'installation sur une version Home de Windows
  if Version.SuiteMask and VER_SUITE_PERSONAL <> 0 then
  begin
    SuppressibleMsgBox('L''application e-comBox ne peut pas être installée sur Windows 10 Famille mais nécessite une version de Windows 10 professionnel, éducation ou entreprise.',
      mbCriticalError, MB_OK, IDOK);
    Result := False;
    Exit;
  end;

  // Désactivation de l'installation sur une version serveur de Windows
  if Version.ProductType = VER_NT_DOMAIN_CONTROLLER then
  begin
    SuppressibleMsgBox('L''application e-comBox ne peut pas être installée sur Windows Serveur mais nécessite une version de Windows 10 professionnel, éducation ou entreprise.',
      mbCriticalError, MB_OK, IDOK);
    Result := False;
    Exit;
  end;
  
  if not Restarted then begin
    Result := not RegValueExists(HKA, 'Software\Microsoft\Windows\CurrentVersion\RunOnce', RunOnceName);
    if not Result then
      MsgBox(QuitMessageReboot, mbInformation, mb_Ok);
      
  end else    
    Result := True;
end;


procedure InitializeWizard;
var
  A: AnsiString;
  S: String;
begin
  // The string msgWizardPreparing has the macro '[name]' inside that I have to replace with the name of my app, stored in a define constant of my script.
  S := SetupMessage(msgPreparingDesc); 
  StringChange(S, '[name]', '{#MyAppName}');
  A := S;
  PrepareToInstallWithProgressPage := CreateOutputProgressPage(SetupMessage(msgWizardPreparing), A);
end;



function DetectAndInstallPrerequisites: Boolean;

begin
  (*** Place your prerequisite detection and installation code below. ***)
  (*** Return False if missing prerequisites were detected but their installation failed, else return True. ***)

  //<your code here>
  // MsgBox('Message dans la fonction DetectAndInstallPrerequisites', mbInformation, mb_Ok);
  Result:= true;
end;

function Quote(const S: String): String;
begin
  Result := '"' + S + '"';
end;

function AddParam(const S, P, V: String): String;
begin
  if V <> '""' then
    Result := S + ' /' + P + '=' + V;
end;

function AddSimpleParam(const S, P: String): String;
begin
 Result := S + ' /' + P;
end;

procedure CreateRunOnceEntry;
var
  RunOnceData: String;
begin
  RunOnceData := Quote(ExpandConstant('{srcexe}')) + ' /restart=1';
  RunOnceData := AddParam(RunOnceData, 'LANG', ExpandConstant('{language}'));
  RunOnceData := AddParam(RunOnceData, 'DIR', Quote(WizardDirValue));
  RunOnceData := AddParam(RunOnceData, 'GROUP', Quote(WizardGroupValue));
  if WizardNoIcons then
    RunOnceData := AddSimpleParam(RunOnceData, 'NOICONS');
    RunOnceData := AddParam(RunOnceData, 'TYPE', Quote(WizardSetupType(False)));
    RunOnceData := AddParam(RunOnceData, 'COMPONENTS', Quote(WizardSelectedComponents(False)));
    RunOnceData := AddParam(RunOnceData, 'TASKS', Quote(WizardSelectedTasks(False)));

  (*** Place any custom user selection you want to remember below. ***)

  //<your code here>
  
  RegWriteStringValue(HKA, 'Software\Microsoft\Windows\CurrentVersion\RunOnce', RunOnceName, RunOnceData);
end;


function PrepareToInstall(var NeedsRestart: Boolean): String;
var
ResultCodeHyperV: Integer;
ResultCode: Integer;

begin
  
  if DetectAndInstallPrerequisites then begin

    PrepareToInstallWithProgressPage.SetProgress (0, 0);
    PrepareToInstallWithProgressPage.Show;

    try
     begin
     
     //Installation de la dernière version de Git si ce dernier n'est pas déjà installé       
     PrepareToInstallWithProgressPage.SetProgress(1, 10);
     PrepareToInstallWithProgressPage.SetText(('Vérification et installation des pré-requis...'), '');
     ExtractTemporaryFile('installGit.ps1');
     Exec('PowerShell.exe', ExpandConstant(' -ExecutionPolicy Bypass -File "{tmp}\installGit.ps1"'), '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
     //MsgBox('La dernière version de Git a été installé, vous pouvez continuer' , mbInformation, mb_Ok);  
     PrepareToInstallWithProgressPage.SetProgress(2, 10);
     
     // Vérifie si HyperV est activé et l'active au cas où puis redémarre la machine     
     ExtractTemporaryFile('checkHyperV.ps1');
     Exec('PowerShell.exe', ExpandConstant(' -ExecutionPolicy Bypass -File "{tmp}\checkHyperV.ps1"'), '', SW_HIDE, ewWaitUntilTerminated, ResultCodeHyperV);
     //MsgBox('Le RESULT CODE HYPER V est : ' + IntToStr(ResultCodeHyperV), mbInformation, mb_Ok);
     PrepareToInstallWithProgressPage.SetProgress (3, 10);

     if ResultCodeHyperV <> 0 then begin
       //if MsgBox('L''assistant d''installation doit activer HyperV, merci de confirmer', mbConfirmation, MB_YESNO) = IDYES then begin
        PrepareToInstallWithProgressPage.SetText(('Activation d''hyperV...'), '');
        ExtractTemporaryFile('activeHyperV.bat');
        Exec(ExpandConstant('{tmp}\activeHyperV.bat'), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
        MsgBox('L''activation d''hyperV a été réalisée', mbInformation, mb_Ok);
        PrepareToInstallWithProgressPage.SetProgress (4, 10);
        //Redémarrage de la machine
        CreateRunOnceEntry;
        NeedsRestart := True;
        Result := QuitMessage1Reboot;
        //end
       end else begin
         // Vérifie si Docker est installé et l'installe et le configure au cas où.
         if RegValueExists(HKEY_CURRENT_USER,'Software\Microsoft\Windows\CurrentVersion\Run','Docker for Windows') = false then begin
           MsgBox('Docker n''est pas installé. '#13#13'Le programme va procéder à son installation. '#13#10'Le temps de téléchargement peut être long. Merci de patienter.', mbInformation, mb_Ok);
           PrepareToInstallWithProgressPage.SetText(('Téléchargement de Docker...'), '');
           PrepareToInstallWithProgressPage.SetProgress(5, 10);
           ExtractTemporaryFile('downloadDocker.ps1');
           Exec('PowerShell.exe', ExpandConstant(' -ExecutionPolicy Bypass -File "{tmp}\downloadDocker.ps1"'), '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
           PrepareToInstallWithProgressPage.SetProgress(7, 10);
           PrepareToInstallWithProgressPage.SetText(('Installation de Docker...'), '');
           ExtractTemporaryFile('installDocker.ps1');
           Exec('PowerShell.exe', ExpandConstant(' -ExecutionPolicy Bypass -File "{tmp}\installDocker.ps1"'), '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
           PrepareToInstallWithProgressPage.SetProgress(8, 10);
           PrepareToInstallWithProgressPage.SetText(('Préparation du redémarrage...'), '');
           //ExtractTemporaryFile('lanceDocker.ps1');
           //Exec('PowerShell.exe', ExpandConstant(' -ExecutionPolicy Bypass -File "{tmp}\lanceDocker.ps1"'), '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
           PrepareToInstallWithProgressPage.SetProgress(10, 10);
           MsgBox('Docker a été installé.', mbInformation, mb_Ok);
           CreateRunOnceEntry;
           NeedsRestart := True;
           Result := QuitMessage2Reboot;
         end;
      end;     
       
     end;  
     finally
      PrepareToInstallWithProgressPage.Hide;
      end;              
    end else
    Result := QuitMessageError;
end;



procedure CurStepChanged(CurStep: TSetupStep);

var
ResultCode: Integer;
ErrorCode: Integer;
AdresseProxy: string;
ProxyByPass: string;
V: Cardinal;

begin

Log('CurStepChanged(' + IntToStr(Ord(CurStep)) + ') called');

  if(CurStep=ssInstall) then begin
     MsgBox('Merci d''attendre la fenêtre "Welcome" de bienvenue de Docker avant de continuer l''installation, signe que Docker a démarré. '#13#13'Vous pouvez ensuite fermer cette fenêtre qui n''apparaît qu''une fois au premier démarrage de Docker.'#13#13'Vous pouvez suivre le statut de Docker dans la barre des tâches au survol de son icône présente dans la zone de notifications dans la partie inférieure droite de lécran. '#13#13'Ce statut est sur starting quand Docker est en train de démarrer puis passe à running quand Docker a démarré et cela peut prendre du temps au démarrage de la machine.', mbInformation, mb_Ok);
      // Configuration d'un éventuel proxy
        //MsgBox('Message AVANT configDocker' , mbInformation, mb_Ok);
        PrepareToInstallWithProgressPage.SetText(('Détection d''un éventuel proxy par l''assistant d''installation'), '');
        ExtractTemporaryFile('configProxyDocker.ps1');
        Exec('PowerShell.exe', ExpandConstant(' -ExecutionPolicy Bypass -File "{app}\scripts\configProxyDocker.ps1"'), '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
        //MsgBox('Message après configDocker' , mbInformation, mb_Ok);     
        PrepareToInstallWithProgressPage.SetProgress(9, 10);

        // Vérifie si un proxy est activé sur la machine et donne les informations le cas échéant
        RegQueryDWordValue(HKEY_CURRENT_USER,'Software\Microsoft\Windows\CurrentVersion\Internet Settings', 'ProxyEnable', V);
        if IntToStr(V)='1' then begin
          ShellExec('open', 'https://docs.google.com/document/d/1qXXyaMNMtY24VgItIv0gdasyT2souVMLRdYkTMEIBeo/edit', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
          RegQueryStringValue(HKEY_CURRENT_USER,'Software\Microsoft\Windows\CurrentVersion\Internet Settings','ProxyServer', AdresseProxy);
          RegQueryStringValue(HKEY_CURRENT_USER,'Software\Microsoft\Windows\CurrentVersion\Internet Settings','ProxyOverride', ProxyByPass);
          StringChangeEx(ProxyByPass,';',',',True);
          ProxyByPass:= ProxyByPass;
          MsgBox('Le programme d''installation a constaté qu''un proxy est configuré sur votre machine. '#13#13'Avant de continuer, vous devez configurer les informations suivantes sur Docker (voir documentation qui a été lancée dans votre navigateur par défaut) : '#13#13'Adresse IP du Proxy : ' + AdresseProxy + ' '#13#10'ByPass : ' + ProxyByPass + ' '#13#13'Vous devez attendre que le service ait redémarré (ce qu''il fait automatiquement) avant de continuer.', mbInformation, mb_Ok);
          Log('Proxy Enable : ' +IntToStr(V) + 'Informations du proxy : ' + AdresseProxy + 'Proxy by pass : " ' + ProxyByPass);
        end;         
          PrepareToInstallWithProgressPage.SetProgress(10, 10);
         
     FinishedInstall := True
  end;  
     
  //if CurStep = ssPostInstall then
    //FinishedInstall := True;       
  //end;
   
  //if(CurStep=ssPostInstall) then begin                
   //ExtractTemporaryFile('installPortainer.ps1');
   //Exec('PowerShell.exe', ExpandConstant(' -ExecutionPolicy Bypass -File "{app}\installPortainer.ps1"'), '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
   //MsgBox('Message après InstallPortainer' , mbInformation, mb_Ok);
   //ExtractTemporaryFile('startPortainer.ps1');
   //Exec('PowerShell.exe', ExpandConstant(' -ExecutionPolicy Bypass -File "{app}\startPortainer.ps1"'), '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
   
   //ExtractTemporaryFile('lanceScriptPS_startPortainer.bat');
   //Exec(ExpandConstant('{app}\lanceScriptPS_startPortainer.bat'), '', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);
   //MsgBox('Message après startPortainer' , mbInformation, mb_Ok);
   //ExtractTemporaryFile('startApplication.ps1');
   //Exec('PowerShell.exe', ExpandConstant(' -ExecutionPolicy Bypass -File "{app}\startApplication.ps1"'), '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
   //MsgBox('L''application e-comBox est installée et démarrée. Vous pouvez la lancer via son URL http://localhost:8888 ou via son icône de lancement' , mbInformation, mb_Ok);
  //end;
end;

function ShouldSkipPage(PageID: Integer): Boolean;
begin
  Result := Restarted;
end;

procedure DeinitializeSetup();

var
NeedsRestart: Boolean;

begin
  Log('DeinitializeSetup called');
  if NeedsRestart then begin
     MsgBox('L''installation continue au prochain démarrage...', mbInformation, MB_OK);
     end ;
  if FinishedInstall then begin
     MsgBox('Fin de l''installation:' #13#13 'L''application e-comBox est en train d''être initialisée. Veuillez patienter.' #13#13 'Elle sera ensuite lancée automatiquement dans votre navigateur par défaut.' #13#13 'Par la suite, vous pouvez démarrer e-comBox en saisissant l''URL http://localhost:8888 dans un navigateur mais il est conseillé d''utiliser l''icône du bureau ou le lien du menu de démarrage qui prennent en compte les modifications de l''environnement comme un changement d''adresse IP ou l''ajout d''un proxy.', mbInformation, MB_OK);
     end ;
     // else
     //MsgBox('L''installation continue au prochain démarrage...', mbInformation, MB_OK);
  end;

//procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
//var
//  ResultCode: Integer;

//begin
  //if CurUninstallStep = usAppMutexCheck then begin

   // Désinstallation de Git
   //if MsgBox('Voulez-vous désinstaller GIT ?', mbConfirmation, MB_YESNO) = IDYES then begin
     //ExtractTemporaryFile('desinstallGit.ps1');
     //Exec('PowerShell.exe', ExpandConstant(' -ExecutionPolicy Bypass -File "{app}\uninstall\desinstallGit.ps1"'), '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
   //end;

   // Désinstallation de Docker
   //if MsgBox('Voulez-vous désinstaller Docker ?', mbConfirmation, MB_YESNO) = IDYES then begin
     //ExtractTemporaryFile('desinstallDocker.ps1');
     //Exec('PowerShell.exe', ExpandConstant(' -ExecutionPolicy Bypass -File "{app}\uninstall\desinstallDocker.ps1"'), '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
   //end;

   // Déactivation d'hyperV
   //if MsgBox('Voulez-vous désactiver HyperV ', mbConfirmation, MB_YESNO) = IDYES then begin
     //ExtractTemporaryFile('desactiveHyperV.bat');
     //Exec(ExpandConstant('{app}\uninstall\desactiveHyperV.bat'), '', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);
     //Restarted := True;              
   //end;
  //end;
//end;

//function UninstallNeedRestart(): Boolean;
//begin
  //if Restarted then begin
  //Result := True;
  //end;
//end;
